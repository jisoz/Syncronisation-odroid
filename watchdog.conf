A Hardware Watchdog is a mechanism used in computing systems to monitor the health and operation of the system, particularly in scenarios where reliability and uptime are critical. It's a hardware component or functionality designed to automatically detect and recover from system malfunctions, crashes, or hangs by initiating a system reset.

Key Aspects:
Monitoring Functionality:

Hardware Watchdogs constantly monitor the system's operation by periodically checking for certain indicators or "heartbeats" that signify normal operation.
If the system stops responding or encounters a critical failure, such as a software lock-up or unresponsive state, the Watchdog detects this abnormal behavior.
Automatic Recovery:

Upon detecting a system malfunction or lock-up, the Watchdog triggers an automatic action, typically a system reset or reboot.
This reset helps restore the system to a known working state, allowing it to recover from the fault.
Implementation:

Hardware Watchdogs are often integrated into embedded systems, servers, network devices, and industrial equipment where continuous operation is crucial.
They can be part of a dedicated hardware module or integrated into certain hardware components, like the CPU or chipset.
Configurability:

Watchdog timers usually come with configurable settings for timeout periods, allowing system administrators to set the threshold for system responsiveness.
If the system doesn't provide the expected "heartbeat" within the defined timeframe, the Watchdog triggers the reset action.
Critical Use Cases:

Hardware Watchdogs are commonly employed in scenarios where human intervention might not be possible or timely in the event of system failures, such as remote servers, industrial control systems, and mission-critical applications.
Operating System Support:

Many operating systems offer support for Hardware Watchdogs, allowing software applications to periodically "pet" or notify the Watchdog to prevent a reset, confirming that the system is functioning correctly.



The still alive messages indicate that the watchdog is being periodically "petted" or "kicked" as expected by the monitoring process. This action resets the watchdog timer, preventing it from reaching its timeout and triggering a system reset.

If the watchdog detects that it hasn't been reset within the configured timeout period, it assumes a system fault and would typically initiate a corrective action (such as a system reset) to ensure system stability.

sudo apt-get install watchdog

# we need when we start the watchdog service to make it load the driver of watchdog 
# to see availale drivers for watchdog (i choosed the softdog)
ls /lib/modules/$(uname -r)/kernel/drivers/watchdog/

cat /etc/default/watchdog
# Start watchdog at boot time? 0 or 1
run_watchdog=1
# Start wd_keepalive after stopping watchdog? 0 or 1
run_wd_keepalive=1
# Load module before starting watchdog
watchdog_module="softdog"
# Specify additional watchdog options here (see manpage).
watchdog_options="-s -v -c /etc/watchdog.conf"



cat /etc/watchdog.conf
# ====================================================================                                                                                                                                             
# Configuration for the watchdog daemon. For more information on the                                                                                                                                               
# parameters in this file use the command 'man watchdog.conf'                                                                                                                                                      
# ====================================================================                                                                                                                                             
 
# =================== The hardware timer settings ====================                                                                                                                                             
#                                                                                                                                                                                                                  
# For this daemon to be effective it really needs some hardware timer                                                                                                                                              
# to back up any reboot actions. If you have a server then see if it                                                                                                                                               
# has IPMI support. Otherwise for Intel-based machines try the iTCO_wdt                                                                                                                                            
# module, otherwise (or if that fails) then see if any of the following                                                                                                                                            
# module load and work:                                                                                                                                                                                            
#                                                                                                                                                                                                                  
# it87_wdt it8712f_wdt w83627hf_wdt w83877f_wdt w83977f_wdt                                                                                                                                                        
#                                                                                                                                                                                                                  
# If all else fails then 'softdog' is better than no timer at all!                                                                                                                                                 
# Or work your way through the modules listed under:                                                                                                                                                               
#                                                                                                                                                                                                                  
# /lib/modules/`uname -r`/kernel/drivers/watchdog/                                                                                                                                                                 
#                                                                                                                                                                                                                  
# To see if they load, present /dev/watchdog, and are capable of                                                                                                                                                   
# resetting the system on time-out.                                                                                                                                                                                
 
# Uncomment this to use the watchdog device driver access "file".                                                                                                                                                  
 
watchdog-device         = /dev/watchdog                                                                                                                                                                            
 
# Uncomment and edit this line for hardware timeout values that differ                                                                                                                                             
# from the default of one minute.                                                                                                                                                                                  
 
watchdog-timeout        = 15                                                                                                                                                                                       
 
# If your watchdog trips by itself when the first timeout interval                                                                                                                                                 
# elapses then try uncommenting the line below and changing the                                                                                                                                                    
# value to 'yes'.                                                                                                                                                                                                  
 
#watchdog-refresh-use-settimeout        = auto                                                                                                                                                                     
 
# If you have a buggy watchdog device (e.g. some IPMI implementations)                                                                                                                                             
# try uncommenting this line and setting it to 'yes'.                                                                                                                                                              
 
#watchdog-refresh-ignore-errors = no                                                                                                                                                                               
 
# ====================== Other system settings ========================                                                                                                                                            
#                                                                                                                                                                                                                  
# Interval between tests. Should be a couple of seconds shorter than                                                                                                                                               
# the hardware time-out value.                                                                                                                                                                                     
 
#interval               = 1                                                                                                                                                                                        
 
# The number of intervals skipped before a log message is written (i.e.                                                                                                                                            
# a multiplier for 'interval' in terms of syslog messages)                                                                                                                                                         
 
#logtick        = 1                                                                                      
 
# Directory for log files (probably best not to change this)
 
#log-dir                = /var/log/watchdog
 
# Email address for sending the reboot reason. This needs sendmail to
# be installed and properly configured. Maybe you should just enable
# syslog forwarding instead?
 
#admin                  = root
 
# Lock the daemon in to memory as a real-time process. This greatly
# decreases the chance that watchdog won't be scheduled before your
# machine is really loaded.
 
realtime                = yes
priority                = 1
 
...




#the driver manages the hardware or kernel watchdog functionality at a low level, while /dev/watchdog provides a convenient interface for user-space processes to interact with and control the watchdog timer's behavior
sudo ln -s  /lib/systemd/system/watchdog.service /etc/systemd/system/multi-user.target.wants/watchdog.service

root@odroid:~# systemctl enable watchdog.service
root@odroid:~# systemctl start watchdog.service


# to make sure module  is loaded 
lsmod | grep softdog
#check /dev/watchdog: If the module is successfully loaded and the service is configured correctly,
#you should also see the presence of /dev/watchdog:


ls /dev/watchdog

:~# service watchdog status
☢ watchdog.service - watchdog daemon
   Loaded: loaded (/lib/systemd/system/watchdog.service; static; vendor preset: 
   Active: active (running) since Fri 2017-09-22 01:24:08 UTC; 44min ago
  Process: 2186 ExecStopPost=/bin/sh -c [ $run_wd_keepalive != 1 ] || false (cod
  Process: 2265 ExecStart=/bin/sh -c [ $run_watchdog != 1 ] || exec /usr/sbin/wa
  Process: 2262 ExecStartPre=/bin/sh -c [ -z "${watchdog_module}" ] || [ "${watc
 Main PID: 2267 (watchdog)
   CGroup: /system.slice/watchdog.service
           ╢╢2267 /usr/sbin/watchdog -s -v -c /etc/watchdog.conf
 
Sep 22 02:08:34 odroid watchdog[2267]: still alive after 2653 interval(s)
Sep 22 02:08:35 odroid watchdog[2267]: still alive after 2654 interval(s)
Sep 22 02:08:36 odroid watchdog[2267]: still alive after 2655 interval(s)
Sep 22 02:08:37 odroid watchdog[2267]: still alive after 2656 interval(s)
Sep 22 02:08:38 odroid watchdog[2267]: still alive after 2657 interval(s)
Sep 22 02:08:39 odroid watchdog[2267]: still alive after 2658 interval(s)



The still alive messages indicate that the watchdog is being periodically "petted" or "kicked" as expected by the monitoring process. This action resets the watchdog timer, preventing it from reaching its timeout and triggering a system reset.

If the watchdog detects that it hasn't been reset within the configured timeout period, it assumes a system fault and would typically initiate a corrective action (such as a system reset) to ensure system stability.

#check logs of the module  
#sudo dmesg | grep "softdog"
[   31.881671] softdog: initialized. soft_noboot=0 soft_margin=60 sec soft_panic=0 (nowayout=0)
[   31.881693] softdog:              soft_reboot_cmd=<not set> soft_active_on_boot=0

softdog: initialized.: Indicates that the softdog module has been successfully initialized.

soft_noboot=0: Specifies the action taken when the watchdog timer triggers. When soft_noboot=0, it implies that the system will perform a reboot when the watchdog timer expires and triggers a reset.

soft_margin=60 sec: Indicates the watchdog's timeout margin or threshold. Here, it's configured with a margin of 60 seconds. If the watchdog is not "kicked" (refreshed) within this timeframe, it will trigger a reset.

soft_panic=0: Specifies the action taken upon a watchdog timeout. When soft_panic=0, it implies that the system will perform a reboot when the watchdog timer expires. However, it's showing 0, which contradicts the expected behavior after setting soft_panic=1.

(nowayout=0): Defines whether the watchdog can be stopped once started. When nowayout=0, it implies that the watchdog can be stopped.


after a panic we need the system to reboot so we need to change the parameter in softdog module 
need to change soft_reboot_cmd 
soft_reboot_cmd=echo b > /proc/sysrq-trigger: Specifies the command used for rebooting after a panic 

#Note that, with the previous command, the module is not loaded automatically again when you reboot. To make it persistent:

Create the /etc/modprobe.d/softdog.conf file with the following content:
options softdog soft_panic=0
options softdog soft_reboot_cmd="echo 'b' > /proc/sysrq-trigger"
options softdog soft_margin=120 sec






Create the /etc/modules-load.d/softdog.conf file with the following content to load the module on boot (with the options you defined earlier in the other file):
Raw
softdog

 sudo systemctl restart systemd-modules-load




to test make a panic to kernel and see if it will reboot
echo c > /proc/sysrq-trigger


